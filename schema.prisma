datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  isAdmin       Boolean   @map("is_admin")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Events         Event[]
  TeamUsers      TeamUser[]
  Teams          Team[]
  SocialAccounts SocialAccount[]

  @@map("users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

model Event {
  id           Int      @id @default(autoincrement())
  creatorId    Int      @map("creator_id")
  description  String
  startAt      DateTime @map("start_at")
  endAt        DateTime @map("end_at")
  entryStartAt DateTime @map("entry_start_at")
  entryEndAt   DateTime @map("entry_end_at")
  teamMember   Int      @map("team_member") // number of players per team

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  CreatedBy  User              @relation(fields: [creatorId], references: [id])
  Placements EventTeamResult[]
  Teams      EventTeam[]

  @@map("events")
}

model EventTeam {
  eventId    Int @map("event_id")
  teamId     Int @map("team_id")
  teamMember Int @map("team_member") // number of players of the team

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Event Event @relation(fields: [eventId], references: [id])
  Team  Team  @relation(fields: [teamId], references: [id])

  @@id([eventId, teamId])
  @@map("event_teams")
}

model EventTeamResult {
  eventId Int @map("event_id")
  teamId  Int @map("team_id")
  rank    Int

  Event Event @relation(fields: [eventId], references: [id])
  Team  Team  @relation(fields: [teamId], references: [id])

  @@id([eventId, teamId])
  @@map("event_team_results")
}

model Team {
  id        Int @id @default(autoincrement())
  creatorId Int @map("creator_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  CreatedBy       User              @relation(fields: [creatorId], references: [id])
  TeamUsers       TeamUser[]
  EventTeam       EventTeam[]
  EventTeamResult EventTeamResult[]

  @@map("teams")
}

model TeamUser {
  teamId Int @map("team_id")
  userId Int @map("user_id")

  Team Team @relation(fields: [teamId], references: [id])
  User User @relation(fields: [userId], references: [id])

  @@id([userId, teamId])
  @@map("team_users")
}

model SocialAccount {
  id         Int        @id @default(autoincrement()) @map("id")
  socialType SocialType @map("social_type") // matches with Account.providerId
  socialId   BigInt     @map("social_id") // matches with Account.providerAccountId
  userId     Int?       @map("user_id")

  User           User?            @relation(fields: [userId], references: [id])
  SocialFollower SocialFollower[]

  @@unique([socialType, socialId])
  @@map("social_accounts")
}

model SocialFollower {
  date            DateTime @db.Date
  count           Int
  socialAccountId Int      @map("social_account_id") // matches with SocialAccount.id

  SocialAccount SocialAccount @relation(fields: [socialAccountId], references: [id])

  @@id([socialAccountId, date])
  @@map("social_followers")
}

enum SocialType {
  Twitter
  YouTube
}
